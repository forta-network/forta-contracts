// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccessManagerUpdated extends ethereum.Event {
  get params(): AccessManagerUpdated__Params {
    return new AccessManagerUpdated__Params(this);
  }
}

export class AccessManagerUpdated__Params {
  _event: AccessManagerUpdated;

  constructor(event: AccessManagerUpdated) {
    this._event = event;
  }

  get newAddressManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AgentCommitted extends ethereum.Event {
  get params(): AgentCommitted__Params {
    return new AgentCommitted__Params(this);
  }
}

export class AgentCommitted__Params {
  _event: AgentCommitted;

  constructor(event: AgentCommitted) {
    this._event = event;
  }

  get commit(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class AgentEnabled extends ethereum.Event {
  get params(): AgentEnabled__Params {
    return new AgentEnabled__Params(this);
  }
}

export class AgentEnabled__Params {
  _event: AgentEnabled;

  constructor(event: AgentEnabled) {
    this._event = event;
  }

  get agentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get permission(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get value(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class AgentUpdated extends ethereum.Event {
  get params(): AgentUpdated__Params {
    return new AgentUpdated__Params(this);
  }
}

export class AgentUpdated__Params {
  _event: AgentUpdated;

  constructor(event: AgentUpdated) {
    this._event = event;
  }

  get agentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get by(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get metadata(): string {
    return this._event.parameters[2].value.toString();
  }

  get chainIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FrontRunningDelaySet extends ethereum.Event {
  get params(): FrontRunningDelaySet__Params {
    return new FrontRunningDelaySet__Params(this);
  }
}

export class FrontRunningDelaySet__Params {
  _event: FrontRunningDelaySet;

  constructor(event: FrontRunningDelaySet) {
    this._event = event;
  }

  get delay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RouterUpdated extends ethereum.Event {
  get params(): RouterUpdated__Params {
    return new RouterUpdated__Params(this);
  }
}

export class RouterUpdated__Params {
  _event: RouterUpdated;

  constructor(event: RouterUpdated) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakeControllerUpdated extends ethereum.Event {
  get params(): StakeControllerUpdated__Params {
    return new StakeControllerUpdated__Params(this);
  }
}

export class StakeControllerUpdated__Params {
  _event: StakeControllerUpdated;

  constructor(event: StakeControllerUpdated) {
    this._event = event;
  }

  get newstakeController(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakeThresholdChanged extends ethereum.Event {
  get params(): StakeThresholdChanged__Params {
    return new StakeThresholdChanged__Params(this);
  }
}

export class StakeThresholdChanged__Params {
  _event: StakeThresholdChanged;

  constructor(event: StakeThresholdChanged) {
    this._event = event;
  }

  get min(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get max(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get activated(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AgentRegistry__getAgentResult {
  value0: boolean;
  value1: Address;
  value2: BigInt;
  value3: string;
  value4: Array<BigInt>;

  constructor(
    value0: boolean,
    value1: Address,
    value2: BigInt,
    value3: string,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }
}

export class AgentRegistry__getAgentStateResult {
  value0: boolean;
  value1: Address;
  value2: BigInt;
  value3: string;
  value4: Array<BigInt>;
  value5: boolean;

  constructor(
    value0: boolean,
    value1: Address,
    value2: BigInt,
    value3: string,
    value4: Array<BigInt>,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class AgentRegistry__getStakeThresholdResultValue0Struct extends ethereum.Tuple {
  get min(): BigInt {
    return this[0].toBigInt();
  }

  get max(): BigInt {
    return this[1].toBigInt();
  }

  get activated(): boolean {
    return this[2].toBoolean();
  }
}

export class AgentRegistry extends ethereum.SmartContract {
  static bind(address: Address): AgentRegistry {
    return new AgentRegistry("AgentRegistry", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  frontRunningDelay(): BigInt {
    let result = super.call(
      "frontRunningDelay",
      "frontRunningDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_frontRunningDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "frontRunningDelay",
      "frontRunningDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAgent(agentId: BigInt): AgentRegistry__getAgentResult {
    let result = super.call(
      "getAgent",
      "getAgent(uint256):(bool,address,uint256,string,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(agentId)]
    );

    return new AgentRegistry__getAgentResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toBigIntArray()
    );
  }

  try_getAgent(
    agentId: BigInt
  ): ethereum.CallResult<AgentRegistry__getAgentResult> {
    let result = super.tryCall(
      "getAgent",
      "getAgent(uint256):(bool,address,uint256,string,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(agentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AgentRegistry__getAgentResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toBigIntArray()
      )
    );
  }

  getAgentByChainAndIndex(chainId: BigInt, index: BigInt): BigInt {
    let result = super.call(
      "getAgentByChainAndIndex",
      "getAgentByChainAndIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAgentByChainAndIndex(
    chainId: BigInt,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAgentByChainAndIndex",
      "getAgentByChainAndIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAgentByIndex(index: BigInt): BigInt {
    let result = super.call(
      "getAgentByIndex",
      "getAgentByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toBigInt();
  }

  try_getAgentByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAgentByIndex",
      "getAgentByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAgentCount(): BigInt {
    let result = super.call("getAgentCount", "getAgentCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getAgentCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAgentCount",
      "getAgentCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAgentCountByChain(chainId: BigInt): BigInt {
    let result = super.call(
      "getAgentCountByChain",
      "getAgentCountByChain(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(chainId)]
    );

    return result[0].toBigInt();
  }

  try_getAgentCountByChain(chainId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAgentCountByChain",
      "getAgentCountByChain(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(chainId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAgentState(agentId: BigInt): AgentRegistry__getAgentStateResult {
    let result = super.call(
      "getAgentState",
      "getAgentState(uint256):(bool,address,uint256,string,uint256[],bool)",
      [ethereum.Value.fromUnsignedBigInt(agentId)]
    );

    return new AgentRegistry__getAgentStateResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toBigIntArray(),
      result[5].toBoolean()
    );
  }

  try_getAgentState(
    agentId: BigInt
  ): ethereum.CallResult<AgentRegistry__getAgentStateResult> {
    let result = super.tryCall(
      "getAgentState",
      "getAgentState(uint256):(bool,address,uint256,string,uint256[],bool)",
      [ethereum.Value.fromUnsignedBigInt(agentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AgentRegistry__getAgentStateResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toBigIntArray(),
        value[5].toBoolean()
      )
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCommitTimestamp(commit: Bytes): BigInt {
    let result = super.call(
      "getCommitTimestamp",
      "getCommitTimestamp(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(commit)]
    );

    return result[0].toBigInt();
  }

  try_getCommitTimestamp(commit: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitTimestamp",
      "getCommitTimestamp(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(commit)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakeController(): Address {
    let result = super.call(
      "getStakeController",
      "getStakeController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getStakeController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getStakeController",
      "getStakeController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStakeThreshold(
    param0: BigInt
  ): AgentRegistry__getStakeThresholdResultValue0Struct {
    let result = super.call(
      "getStakeThreshold",
      "getStakeThreshold(uint256):((uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return changetype<AgentRegistry__getStakeThresholdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getStakeThreshold(
    param0: BigInt
  ): ethereum.CallResult<AgentRegistry__getStakeThresholdResultValue0Struct> {
    let result = super.tryCall(
      "getStakeThreshold",
      "getStakeThreshold(uint256):((uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AgentRegistry__getStakeThresholdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCreated(agentId: BigInt): boolean {
    let result = super.call("isCreated", "isCreated(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(agentId)
    ]);

    return result[0].toBoolean();
  }

  try_isCreated(agentId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCreated", "isCreated(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(agentId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEnabled(agentId: BigInt): boolean {
    let result = super.call("isEnabled", "isEnabled(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(agentId)
    ]);

    return result[0].toBoolean();
  }

  try_isEnabled(agentId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isEnabled", "isEnabled(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(agentId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStakedOverMin(subject: BigInt): boolean {
    let result = super.call(
      "isStakedOverMin",
      "isStakedOverMin(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(subject)]
    );

    return result[0].toBoolean();
  }

  try_isStakedOverMin(subject: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isStakedOverMin",
      "isStakedOverMin(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(subject)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get forwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateAgentCall extends ethereum.Call {
  get inputs(): CreateAgentCall__Inputs {
    return new CreateAgentCall__Inputs(this);
  }

  get outputs(): CreateAgentCall__Outputs {
    return new CreateAgentCall__Outputs(this);
  }
}

export class CreateAgentCall__Inputs {
  _call: CreateAgentCall;

  constructor(call: CreateAgentCall) {
    this._call = call;
  }

  get agentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get metadata(): string {
    return this._call.inputValues[2].value.toString();
  }

  get chainIds(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class CreateAgentCall__Outputs {
  _call: CreateAgentCall;

  constructor(call: CreateAgentCall) {
    this._call = call;
  }
}

export class DisableAgentCall extends ethereum.Call {
  get inputs(): DisableAgentCall__Inputs {
    return new DisableAgentCall__Inputs(this);
  }

  get outputs(): DisableAgentCall__Outputs {
    return new DisableAgentCall__Outputs(this);
  }
}

export class DisableAgentCall__Inputs {
  _call: DisableAgentCall;

  constructor(call: DisableAgentCall) {
    this._call = call;
  }

  get agentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get permission(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class DisableAgentCall__Outputs {
  _call: DisableAgentCall;

  constructor(call: DisableAgentCall) {
    this._call = call;
  }
}

export class EnableAgentCall extends ethereum.Call {
  get inputs(): EnableAgentCall__Inputs {
    return new EnableAgentCall__Inputs(this);
  }

  get outputs(): EnableAgentCall__Outputs {
    return new EnableAgentCall__Outputs(this);
  }
}

export class EnableAgentCall__Inputs {
  _call: EnableAgentCall;

  constructor(call: EnableAgentCall) {
    this._call = call;
  }

  get agentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get permission(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class EnableAgentCall__Outputs {
  _call: EnableAgentCall;

  constructor(call: EnableAgentCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get __name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get __symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PrepareAgentCall extends ethereum.Call {
  get inputs(): PrepareAgentCall__Inputs {
    return new PrepareAgentCall__Inputs(this);
  }

  get outputs(): PrepareAgentCall__Outputs {
    return new PrepareAgentCall__Outputs(this);
  }
}

export class PrepareAgentCall__Inputs {
  _call: PrepareAgentCall;

  constructor(call: PrepareAgentCall) {
    this._call = call;
  }

  get commit(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PrepareAgentCall__Outputs {
  _call: PrepareAgentCall;

  constructor(call: PrepareAgentCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetAccessManagerCall extends ethereum.Call {
  get inputs(): SetAccessManagerCall__Inputs {
    return new SetAccessManagerCall__Inputs(this);
  }

  get outputs(): SetAccessManagerCall__Outputs {
    return new SetAccessManagerCall__Outputs(this);
  }
}

export class SetAccessManagerCall__Inputs {
  _call: SetAccessManagerCall;

  constructor(call: SetAccessManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAccessManagerCall__Outputs {
  _call: SetAccessManagerCall;

  constructor(call: SetAccessManagerCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetFrontRunningDelayCall extends ethereum.Call {
  get inputs(): SetFrontRunningDelayCall__Inputs {
    return new SetFrontRunningDelayCall__Inputs(this);
  }

  get outputs(): SetFrontRunningDelayCall__Outputs {
    return new SetFrontRunningDelayCall__Outputs(this);
  }
}

export class SetFrontRunningDelayCall__Inputs {
  _call: SetFrontRunningDelayCall;

  constructor(call: SetFrontRunningDelayCall) {
    this._call = call;
  }

  get delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFrontRunningDelayCall__Outputs {
  _call: SetFrontRunningDelayCall;

  constructor(call: SetFrontRunningDelayCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get ensRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ensName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetRouterCall extends ethereum.Call {
  get inputs(): SetRouterCall__Inputs {
    return new SetRouterCall__Inputs(this);
  }

  get outputs(): SetRouterCall__Outputs {
    return new SetRouterCall__Outputs(this);
  }
}

export class SetRouterCall__Inputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }

  get newRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRouterCall__Outputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }
}

export class SetStakeControllerCall extends ethereum.Call {
  get inputs(): SetStakeControllerCall__Inputs {
    return new SetStakeControllerCall__Inputs(this);
  }

  get outputs(): SetStakeControllerCall__Outputs {
    return new SetStakeControllerCall__Outputs(this);
  }
}

export class SetStakeControllerCall__Inputs {
  _call: SetStakeControllerCall;

  constructor(call: SetStakeControllerCall) {
    this._call = call;
  }

  get stakeController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakeControllerCall__Outputs {
  _call: SetStakeControllerCall;

  constructor(call: SetStakeControllerCall) {
    this._call = call;
  }
}

export class SetStakeThresholdCall extends ethereum.Call {
  get inputs(): SetStakeThresholdCall__Inputs {
    return new SetStakeThresholdCall__Inputs(this);
  }

  get outputs(): SetStakeThresholdCall__Outputs {
    return new SetStakeThresholdCall__Outputs(this);
  }
}

export class SetStakeThresholdCall__Inputs {
  _call: SetStakeThresholdCall;

  constructor(call: SetStakeThresholdCall) {
    this._call = call;
  }

  get newStakeThreshold(): SetStakeThresholdCallNewStakeThresholdStruct {
    return changetype<SetStakeThresholdCallNewStakeThresholdStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetStakeThresholdCall__Outputs {
  _call: SetStakeThresholdCall;

  constructor(call: SetStakeThresholdCall) {
    this._call = call;
  }
}

export class SetStakeThresholdCallNewStakeThresholdStruct extends ethereum.Tuple {
  get min(): BigInt {
    return this[0].toBigInt();
  }

  get max(): BigInt {
    return this[1].toBigInt();
  }

  get activated(): boolean {
    return this[2].toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateAgentCall extends ethereum.Call {
  get inputs(): UpdateAgentCall__Inputs {
    return new UpdateAgentCall__Inputs(this);
  }

  get outputs(): UpdateAgentCall__Outputs {
    return new UpdateAgentCall__Outputs(this);
  }
}

export class UpdateAgentCall__Inputs {
  _call: UpdateAgentCall;

  constructor(call: UpdateAgentCall) {
    this._call = call;
  }

  get agentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get metadata(): string {
    return this._call.inputValues[1].value.toString();
  }

  get chainIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateAgentCall__Outputs {
  _call: UpdateAgentCall;

  constructor(call: UpdateAgentCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
