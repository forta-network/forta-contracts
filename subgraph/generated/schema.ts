// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asScanner(): string | null {
    let value = this.get("asScanner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asScanner(value: string | null) {
    if (!value) {
      this.unset("asScanner");
    } else {
      this.set("asScanner", Value.fromString(<string>value));
    }
  }

  get bots(): Array<string> {
    let value = this.get("bots");
    return value!.toStringArray();
  }

  set bots(value: Array<string>) {
    this.set("bots", Value.fromStringArray(value));
  }

  get scanners(): Array<string> {
    let value = this.get("scanners");
    return value!.toStringArray();
  }

  set scanners(value: Array<string>) {
    this.set("scanners", Value.fromStringArray(value));
  }

  get managerOf(): Array<string> {
    let value = this.get("managerOf");
    return value!.toStringArray();
  }

  set managerOf(value: Array<string>) {
    this.set("managerOf", Value.fromStringArray(value));
  }

  get botTransferFromEvents(): Array<string> {
    let value = this.get("botTransferFromEvents");
    return value!.toStringArray();
  }

  set botTransferFromEvents(value: Array<string>) {
    this.set("botTransferFromEvents", Value.fromStringArray(value));
  }

  get botTransferToEvents(): Array<string> {
    let value = this.get("botTransferToEvents");
    return value!.toStringArray();
  }

  set botTransferToEvents(value: Array<string>) {
    this.set("botTransferToEvents", Value.fromStringArray(value));
  }

  get botUpdatedEvents(): Array<string> {
    let value = this.get("botUpdatedEvents");
    return value!.toStringArray();
  }

  set botUpdatedEvents(value: Array<string>) {
    this.set("botUpdatedEvents", Value.fromStringArray(value));
  }

  get scannerTransferFromEvents(): Array<string> {
    let value = this.get("scannerTransferFromEvents");
    return value!.toStringArray();
  }

  set scannerTransferFromEvents(value: Array<string>) {
    this.set("scannerTransferFromEvents", Value.fromStringArray(value));
  }

  get scannerTransferToEvents(): Array<string> {
    let value = this.get("scannerTransferToEvents");
    return value!.toStringArray();
  }

  set scannerTransferToEvents(value: Array<string>) {
    this.set("scannerTransferToEvents", Value.fromStringArray(value));
  }

  get scannerManagerEnabledEvents(): Array<string> {
    let value = this.get("scannerManagerEnabledEvents");
    return value!.toStringArray();
  }

  set scannerManagerEnabledEvents(value: Array<string>) {
    this.set("scannerManagerEnabledEvents", Value.fromStringArray(value));
  }
}

export class Bot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bot", id.toString(), this);
    }
  }

  static load(id: string): Bot | null {
    return changetype<Bot | null>(store.get("Bot", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get disableFlags(): i32 {
    let value = this.get("disableFlags");
    return value!.toI32();
  }

  set disableFlags(value: i32) {
    this.set("disableFlags", Value.fromI32(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get chainIds(): Array<BigInt> {
    let value = this.get("chainIds");
    return value!.toBigIntArray();
  }

  set chainIds(value: Array<BigInt>) {
    this.set("chainIds", Value.fromBigIntArray(value));
  }

  get scanners(): Array<string> | null {
    let value = this.get("scanners");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set scanners(value: Array<string> | null) {
    if (!value) {
      this.unset("scanners");
    } else {
      this.set("scanners", Value.fromStringArray(<Array<string>>value));
    }
  }

  get botTransferEvents(): Array<string> {
    let value = this.get("botTransferEvents");
    return value!.toStringArray();
  }

  set botTransferEvents(value: Array<string>) {
    this.set("botTransferEvents", Value.fromStringArray(value));
  }

  get botUpdatedEvents(): Array<string> {
    let value = this.get("botUpdatedEvents");
    return value!.toStringArray();
  }

  set botUpdatedEvents(value: Array<string>) {
    this.set("botUpdatedEvents", Value.fromStringArray(value));
  }

  get botEnabledEvents(): Array<string> {
    let value = this.get("botEnabledEvents");
    return value!.toStringArray();
  }

  set botEnabledEvents(value: Array<string>) {
    this.set("botEnabledEvents", Value.fromStringArray(value));
  }

  get linkEnabledEvents(): Array<string> {
    let value = this.get("linkEnabledEvents");
    return value!.toStringArray();
  }

  set linkEnabledEvents(value: Array<string>) {
    this.set("linkEnabledEvents", Value.fromStringArray(value));
  }
}

export class Scanner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Scanner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Scanner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Scanner", id.toString(), this);
    }
  }

  static load(id: string): Scanner | null {
    return changetype<Scanner | null>(store.get("Scanner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asAccount(): string {
    let value = this.get("asAccount");
    return value!.toString();
  }

  set asAccount(value: string) {
    this.set("asAccount", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get disableFlags(): i32 {
    let value = this.get("disableFlags");
    return value!.toI32();
  }

  set disableFlags(value: i32) {
    this.set("disableFlags", Value.fromI32(value));
  }

  get managers(): Array<string> {
    let value = this.get("managers");
    return value!.toStringArray();
  }

  set managers(value: Array<string>) {
    this.set("managers", Value.fromStringArray(value));
  }

  get links(): Array<string> {
    let value = this.get("links");
    return value!.toStringArray();
  }

  set links(value: Array<string>) {
    this.set("links", Value.fromStringArray(value));
  }

  get stakeThreshold(): string {
    let value = this.get("stakeThreshold");
    return value!.toString();
  }

  set stakeThreshold(value: string) {
    this.set("stakeThreshold", Value.fromString(value));
  }

  get subject(): string | null {
    let value = this.get("subject");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subject(value: string | null) {
    if (!value) {
      this.unset("subject");
    } else {
      this.set("subject", Value.fromString(<string>value));
    }
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    return value!.toBigInt();
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get bots(): Array<string> | null {
    let value = this.get("bots");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bots(value: Array<string> | null) {
    if (!value) {
      this.unset("bots");
    } else {
      this.set("bots", Value.fromStringArray(<Array<string>>value));
    }
  }

  get scannerTransferEvents(): Array<string> {
    let value = this.get("scannerTransferEvents");
    return value!.toStringArray();
  }

  set scannerTransferEvents(value: Array<string>) {
    this.set("scannerTransferEvents", Value.fromStringArray(value));
  }

  get scannerUpdatedEvents(): Array<string> {
    let value = this.get("scannerUpdatedEvents");
    return value!.toStringArray();
  }

  set scannerUpdatedEvents(value: Array<string>) {
    this.set("scannerUpdatedEvents", Value.fromStringArray(value));
  }

  get scannerEnabledEvents(): Array<string> {
    let value = this.get("scannerEnabledEvents");
    return value!.toStringArray();
  }

  set scannerEnabledEvents(value: Array<string>) {
    this.set("scannerEnabledEvents", Value.fromStringArray(value));
  }

  get scannerManagerEnabledEvents(): Array<string> {
    let value = this.get("scannerManagerEnabledEvents");
    return value!.toStringArray();
  }

  set scannerManagerEnabledEvents(value: Array<string>) {
    this.set("scannerManagerEnabledEvents", Value.fromStringArray(value));
  }

  get linkEnabledEvents(): Array<string> {
    let value = this.get("linkEnabledEvents");
    return value!.toStringArray();
  }

  set linkEnabledEvents(value: Array<string>) {
    this.set("linkEnabledEvents", Value.fromStringArray(value));
  }
}

export class ScannerManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ScannerManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ScannerManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ScannerManager", id.toString(), this);
    }
  }

  static load(id: string): ScannerManager | null {
    return changetype<ScannerManager | null>(store.get("ScannerManager", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get scanner(): string {
    let value = this.get("scanner");
    return value!.toString();
  }

  set scanner(value: string) {
    this.set("scanner", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get scannerManagerEnabledEvents(): Array<string> {
    let value = this.get("scannerManagerEnabledEvents");
    return value!.toStringArray();
  }

  set scannerManagerEnabledEvents(value: Array<string>) {
    this.set("scannerManagerEnabledEvents", Value.fromStringArray(value));
  }
}

export class Link extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Link entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Link must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Link", id.toString(), this);
    }
  }

  static load(id: string): Link | null {
    return changetype<Link | null>(store.get("Link", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bot(): string {
    let value = this.get("bot");
    return value!.toString();
  }

  set bot(value: string) {
    this.set("bot", Value.fromString(value));
  }

  get scanner(): string {
    let value = this.get("scanner");
    return value!.toString();
  }

  set scanner(value: string) {
    this.set("scanner", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get linkEnabledEvents(): Array<string> {
    let value = this.get("linkEnabledEvents");
    return value!.toStringArray();
  }

  set linkEnabledEvents(value: Array<string>) {
    this.set("linkEnabledEvents", Value.fromStringArray(value));
  }
}

export class BotTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BotTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BotTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BotTransfer", id.toString(), this);
    }
  }

  static load(id: string): BotTransfer | null {
    return changetype<BotTransfer | null>(store.get("BotTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get bot(): string {
    let value = this.get("bot");
    return value!.toString();
  }

  set bot(value: string) {
    this.set("bot", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }
}

export class BotUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BotUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BotUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BotUpdated", id.toString(), this);
    }
  }

  static load(id: string): BotUpdated | null {
    return changetype<BotUpdated | null>(store.get("BotUpdated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get bot(): string {
    let value = this.get("bot");
    return value!.toString();
  }

  set bot(value: string) {
    this.set("bot", Value.fromString(value));
  }

  get by(): string {
    let value = this.get("by");
    return value!.toString();
  }

  set by(value: string) {
    this.set("by", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get chains(): Array<BigInt> {
    let value = this.get("chains");
    return value!.toBigIntArray();
  }

  set chains(value: Array<BigInt>) {
    this.set("chains", Value.fromBigIntArray(value));
  }
}

export class BotEnabled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BotEnabled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BotEnabled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BotEnabled", id.toString(), this);
    }
  }

  static load(id: string): BotEnabled | null {
    return changetype<BotEnabled | null>(store.get("BotEnabled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get bot(): string {
    let value = this.get("bot");
    return value!.toString();
  }

  set bot(value: string) {
    this.set("bot", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get permission(): i32 {
    let value = this.get("permission");
    return value!.toI32();
  }

  set permission(value: i32) {
    this.set("permission", Value.fromI32(value));
  }

  get value(): boolean {
    let value = this.get("value");
    return value!.toBoolean();
  }

  set value(value: boolean) {
    this.set("value", Value.fromBoolean(value));
  }
}

export class ScannerTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ScannerTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ScannerTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ScannerTransfer", id.toString(), this);
    }
  }

  static load(id: string): ScannerTransfer | null {
    return changetype<ScannerTransfer | null>(store.get("ScannerTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get scanner(): string {
    let value = this.get("scanner");
    return value!.toString();
  }

  set scanner(value: string) {
    this.set("scanner", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }
}

export class ScannerEnabled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ScannerEnabled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ScannerEnabled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ScannerEnabled", id.toString(), this);
    }
  }

  static load(id: string): ScannerEnabled | null {
    return changetype<ScannerEnabled | null>(store.get("ScannerEnabled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get scanner(): string {
    let value = this.get("scanner");
    return value!.toString();
  }

  set scanner(value: string) {
    this.set("scanner", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get permission(): i32 {
    let value = this.get("permission");
    return value!.toI32();
  }

  set permission(value: i32) {
    this.set("permission", Value.fromI32(value));
  }

  get value(): boolean {
    let value = this.get("value");
    return value!.toBoolean();
  }

  set value(value: boolean) {
    this.set("value", Value.fromBoolean(value));
  }
}

export class ScannerUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ScannerUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ScannerUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ScannerUpdated", id.toString(), this);
    }
  }

  static load(id: string): ScannerUpdated | null {
    return changetype<ScannerUpdated | null>(store.get("ScannerUpdated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get scanner(): string {
    let value = this.get("scanner");
    return value!.toString();
  }

  set scanner(value: string) {
    this.set("scanner", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    return value!.toBigInt();
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }
}

export class ScannerManagerEnabled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ScannerManagerEnabled entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ScannerManagerEnabled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ScannerManagerEnabled", id.toString(), this);
    }
  }

  static load(id: string): ScannerManagerEnabled | null {
    return changetype<ScannerManagerEnabled | null>(
      store.get("ScannerManagerEnabled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get scanner(): string {
    let value = this.get("scanner");
    return value!.toString();
  }

  set scanner(value: string) {
    this.set("scanner", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get scannermanager(): string {
    let value = this.get("scannermanager");
    return value!.toString();
  }

  set scannermanager(value: string) {
    this.set("scannermanager", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }
}

export class LinkEnabled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LinkEnabled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LinkEnabled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LinkEnabled", id.toString(), this);
    }
  }

  static load(id: string): LinkEnabled | null {
    return changetype<LinkEnabled | null>(store.get("LinkEnabled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get scanner(): string {
    let value = this.get("scanner");
    return value!.toString();
  }

  set scanner(value: string) {
    this.set("scanner", Value.fromString(value));
  }

  get bot(): string {
    let value = this.get("bot");
    return value!.toString();
  }

  set bot(value: string) {
    this.set("bot", Value.fromString(value));
  }

  get link(): string {
    let value = this.get("link");
    return value!.toString();
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }
}

export class StakeThreshold extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeThreshold entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakeThreshold must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakeThreshold", id.toString(), this);
    }
  }

  static load(id: string): StakeThreshold | null {
    return changetype<StakeThreshold | null>(store.get("StakeThreshold", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get scanner(): string {
    let value = this.get("scanner");
    return value!.toString();
  }

  set scanner(value: string) {
    this.set("scanner", Value.fromString(value));
  }

  get activated(): boolean {
    let value = this.get("activated");
    return value!.toBoolean();
  }

  set activated(value: boolean) {
    this.set("activated", Value.fromBoolean(value));
  }

  get min(): BigInt | null {
    let value = this.get("min");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set min(value: BigInt | null) {
    if (!value) {
      this.unset("min");
    } else {
      this.set("min", Value.fromBigInt(<BigInt>value));
    }
  }

  get max(): BigInt | null {
    let value = this.get("max");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set max(value: BigInt | null) {
    if (!value) {
      this.unset("max");
    } else {
      this.set("max", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Subject extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Subject entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Subject must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Subject", id.toString(), this);
    }
  }

  static load(id: string): Subject | null {
    return changetype<Subject | null>(store.get("Subject", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subjectType(): i32 {
    let value = this.get("subjectType");
    return value!.toI32();
  }

  set subjectType(value: i32) {
    this.set("subjectType", Value.fromI32(value));
  }

  get activeSharesId(): i32 {
    let value = this.get("activeSharesId");
    return value!.toI32();
  }

  set activeSharesId(value: i32) {
    this.set("activeSharesId", Value.fromI32(value));
  }

  get activeShares(): BigInt | null {
    let value = this.get("activeShares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set activeShares(value: BigInt | null) {
    if (!value) {
      this.unset("activeShares");
    } else {
      this.set("activeShares", Value.fromBigInt(<BigInt>value));
    }
  }

  get activeStake(): BigInt | null {
    let value = this.get("activeStake");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set activeStake(value: BigInt | null) {
    if (!value) {
      this.unset("activeStake");
    } else {
      this.set("activeStake", Value.fromBigInt(<BigInt>value));
    }
  }

  get inactiveSharesId(): i32 {
    let value = this.get("inactiveSharesId");
    return value!.toI32();
  }

  set inactiveSharesId(value: i32) {
    this.set("inactiveSharesId", Value.fromI32(value));
  }

  get inactiveShares(): BigInt | null {
    let value = this.get("inactiveShares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inactiveShares(value: BigInt | null) {
    if (!value) {
      this.unset("inactiveShares");
    } else {
      this.set("inactiveShares", Value.fromBigInt(<BigInt>value));
    }
  }

  get inactiveStake(): BigInt | null {
    let value = this.get("inactiveStake");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inactiveStake(value: BigInt | null) {
    if (!value) {
      this.unset("inactiveStake");
    } else {
      this.set("inactiveStake", Value.fromBigInt(<BigInt>value));
    }
  }

  get isFrozen(): boolean {
    let value = this.get("isFrozen");
    return value!.toBoolean();
  }

  set isFrozen(value: boolean) {
    this.set("isFrozen", Value.fromBoolean(value));
  }

  get slashedTotal(): i32 {
    let value = this.get("slashedTotal");
    return value!.toI32();
  }

  set slashedTotal(value: i32) {
    this.set("slashedTotal", Value.fromI32(value));
  }
}

export class Slash extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Slash entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Slash must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Slash", id.toString(), this);
    }
  }

  static load(id: string): Slash | null {
    return changetype<Slash | null>(store.get("Slash", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subjectType(): i32 {
    let value = this.get("subjectType");
    return value!.toI32();
  }

  set subjectType(value: i32) {
    this.set("subjectType", Value.fromI32(value));
  }

  get subjectId(): string | null {
    let value = this.get("subjectId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subjectId(value: string | null) {
    if (!value) {
      this.unset("subjectId");
    } else {
      this.set("subjectId", Value.fromString(<string>value));
    }
  }

  get stakeValue(): i32 {
    let value = this.get("stakeValue");
    return value!.toI32();
  }

  set stakeValue(value: i32) {
    this.set("stakeValue", Value.fromI32(value));
  }

  get by(): string | null {
    let value = this.get("by");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set by(value: string | null) {
    if (!value) {
      this.unset("by");
    } else {
      this.set("by", Value.fromString(<string>value));
    }
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get activeSharesId(): i32 {
    let value = this.get("activeSharesId");
    return value!.toI32();
  }

  set activeSharesId(value: i32) {
    this.set("activeSharesId", Value.fromI32(value));
  }

  get subjectType(): i32 {
    let value = this.get("subjectType");
    return value!.toI32();
  }

  set subjectType(value: i32) {
    this.set("subjectType", Value.fromI32(value));
  }

  get subjectId(): string | null {
    let value = this.get("subjectId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subjectId(value: string | null) {
    if (!value) {
      this.unset("subjectId");
    } else {
      this.set("subjectId", Value.fromString(<string>value));
    }
  }

  get staker(): string {
    let value = this.get("staker");
    return value!.toString();
  }

  set staker(value: string) {
    this.set("staker", Value.fromString(value));
  }
}

export class Staker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Staker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Staker must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Staker", id.toString(), this);
    }
  }

  static load(id: string): Staker | null {
    return changetype<Staker | null>(store.get("Staker", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakes(): Array<string> {
    let value = this.get("stakes");
    return value!.toStringArray();
  }

  set stakes(value: Array<string>) {
    this.set("stakes", Value.fromStringArray(value));
  }

  get releasedRewards(): Array<string> | null {
    let value = this.get("releasedRewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set releasedRewards(value: Array<string> | null) {
    if (!value) {
      this.unset("releasedRewards");
    } else {
      this.set("releasedRewards", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Stake must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Stake", id.toString(), this);
    }
  }

  static load(id: string): Stake | null {
    return changetype<Stake | null>(store.get("Stake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subjectId(): string | null {
    let value = this.get("subjectId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subjectId(value: string | null) {
    if (!value) {
      this.unset("subjectId");
    } else {
      this.set("subjectId", Value.fromString(<string>value));
    }
  }

  get subjectType(): i32 {
    let value = this.get("subjectType");
    return value!.toI32();
  }

  set subjectType(value: i32) {
    this.set("subjectType", Value.fromI32(value));
  }

  get staker(): string {
    let value = this.get("staker");
    return value!.toString();
  }

  set staker(value: string) {
    this.set("staker", Value.fromString(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get stake(): BigInt | null {
    let value = this.get("stake");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stake(value: BigInt | null) {
    if (!value) {
      this.unset("stake");
    } else {
      this.set("stake", Value.fromBigInt(<BigInt>value));
    }
  }

  get shares(): BigInt | null {
    let value = this.get("shares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set shares(value: BigInt | null) {
    if (!value) {
      this.unset("shares");
    } else {
      this.set("shares", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DecimalValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DecimalValue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DecimalValue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DecimalValue", id.toString(), this);
    }
  }

  static load(id: string): DecimalValue | null {
    return changetype<DecimalValue | null>(store.get("DecimalValue", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get exact(): BigInt {
    let value = this.get("exact");
    return value!.toBigInt();
  }

  set exact(value: BigInt) {
    this.set("exact", Value.fromBigInt(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class PersistentString extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PersistentString entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PersistentString must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PersistentString", id.toString(), this);
    }
  }

  static load(id: string): PersistentString | null {
    return changetype<PersistentString | null>(
      store.get("PersistentString", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class PersistentStringArray extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PersistentStringArray entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PersistentStringArray must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PersistentStringArray", id.toString(), this);
    }
  }

  static load(id: string): PersistentStringArray | null {
    return changetype<PersistentStringArray | null>(
      store.get("PersistentStringArray", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get values(): Array<string> {
    let value = this.get("values");
    return value!.toStringArray();
  }

  set values(value: Array<string>) {
    this.set("values", Value.fromStringArray(value));
  }
}
