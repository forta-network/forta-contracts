// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccessManagerUpdated extends ethereum.Event {
  get params(): AccessManagerUpdated__Params {
    return new AccessManagerUpdated__Params(this);
  }
}

export class AccessManagerUpdated__Params {
  _event: AccessManagerUpdated;

  constructor(event: AccessManagerUpdated) {
    this._event = event;
  }

  get newAddressManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AlreadyLinked extends ethereum.Event {
  get params(): AlreadyLinked__Params {
    return new AlreadyLinked__Params(this);
  }
}

export class AlreadyLinked__Params {
  _event: AlreadyLinked;

  constructor(event: AlreadyLinked) {
    this._event = event;
  }

  get agentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get scannerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get enable(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Link extends ethereum.Event {
  get params(): Link__Params {
    return new Link__Params(this);
  }
}

export class Link__Params {
  _event: Link;

  constructor(event: Link) {
    this._event = event;
  }

  get agentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get scannerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get enable(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RouterUpdated extends ethereum.Event {
  get params(): RouterUpdated__Params {
    return new RouterUpdated__Params(this);
  }
}

export class RouterUpdated__Params {
  _event: RouterUpdated;

  constructor(event: RouterUpdated) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Dispatcher__agentHashResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }
}

export class Dispatcher__agentRefAtResult {
  value0: boolean;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: string;
  value5: Array<BigInt>;
  value6: boolean;

  constructor(
    value0: boolean,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: string,
    value5: Array<BigInt>,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class Dispatcher__scannerHashResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }
}

export class Dispatcher__scannerRefAtResult {
  value0: boolean;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: string;
  value5: boolean;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: string,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class Dispatcher extends ethereum.SmartContract {
  static bind(address: Address): Dispatcher {
    return new Dispatcher("Dispatcher", address);
  }

  agentAt(scannerId: BigInt, pos: BigInt): BigInt {
    let result = super.call("agentAt", "agentAt(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(scannerId),
      ethereum.Value.fromUnsignedBigInt(pos)
    ]);

    return result[0].toBigInt();
  }

  try_agentAt(scannerId: BigInt, pos: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "agentAt",
      "agentAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(scannerId),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  agentHash(agentId: BigInt): Dispatcher__agentHashResult {
    let result = super.call(
      "agentHash",
      "agentHash(uint256):(uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(agentId)]
    );

    return new Dispatcher__agentHashResult(
      result[0].toBigInt(),
      result[1].toBytes()
    );
  }

  try_agentHash(
    agentId: BigInt
  ): ethereum.CallResult<Dispatcher__agentHashResult> {
    let result = super.tryCall(
      "agentHash",
      "agentHash(uint256):(uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(agentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Dispatcher__agentHashResult(value[0].toBigInt(), value[1].toBytes())
    );
  }

  agentRefAt(scannerId: BigInt, pos: BigInt): Dispatcher__agentRefAtResult {
    let result = super.call(
      "agentRefAt",
      "agentRefAt(uint256,uint256):(bool,address,uint256,uint256,string,uint256[],bool)",
      [
        ethereum.Value.fromUnsignedBigInt(scannerId),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );

    return new Dispatcher__agentRefAtResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toBigIntArray(),
      result[6].toBoolean()
    );
  }

  try_agentRefAt(
    scannerId: BigInt,
    pos: BigInt
  ): ethereum.CallResult<Dispatcher__agentRefAtResult> {
    let result = super.tryCall(
      "agentRefAt",
      "agentRefAt(uint256,uint256):(bool,address,uint256,uint256,string,uint256[],bool)",
      [
        ethereum.Value.fromUnsignedBigInt(scannerId),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Dispatcher__agentRefAtResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toBigIntArray(),
        value[6].toBoolean()
      )
    );
  }

  agentRegistry(): Address {
    let result = super.call("agentRegistry", "agentRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_agentRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "agentRegistry",
      "agentRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  areTheyLinked(agentId: BigInt, scannerId: BigInt): boolean {
    let result = super.call(
      "areTheyLinked",
      "areTheyLinked(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(agentId),
        ethereum.Value.fromUnsignedBigInt(scannerId)
      ]
    );

    return result[0].toBoolean();
  }

  try_areTheyLinked(
    agentId: BigInt,
    scannerId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "areTheyLinked",
      "areTheyLinked(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(agentId),
        ethereum.Value.fromUnsignedBigInt(scannerId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  numAgentsFor(scannerId: BigInt): BigInt {
    let result = super.call("numAgentsFor", "numAgentsFor(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(scannerId)
    ]);

    return result[0].toBigInt();
  }

  try_numAgentsFor(scannerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numAgentsFor",
      "numAgentsFor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(scannerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numScannersFor(agentId: BigInt): BigInt {
    let result = super.call(
      "numScannersFor",
      "numScannersFor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(agentId)]
    );

    return result[0].toBigInt();
  }

  try_numScannersFor(agentId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numScannersFor",
      "numScannersFor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(agentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  scannerAt(agentId: BigInt, pos: BigInt): BigInt {
    let result = super.call(
      "scannerAt",
      "scannerAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(agentId),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );

    return result[0].toBigInt();
  }

  try_scannerAt(agentId: BigInt, pos: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "scannerAt",
      "scannerAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(agentId),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  scannerHash(scannerId: BigInt): Dispatcher__scannerHashResult {
    let result = super.call(
      "scannerHash",
      "scannerHash(uint256):(uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(scannerId)]
    );

    return new Dispatcher__scannerHashResult(
      result[0].toBigInt(),
      result[1].toBytes()
    );
  }

  try_scannerHash(
    scannerId: BigInt
  ): ethereum.CallResult<Dispatcher__scannerHashResult> {
    let result = super.tryCall(
      "scannerHash",
      "scannerHash(uint256):(uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(scannerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Dispatcher__scannerHashResult(value[0].toBigInt(), value[1].toBytes())
    );
  }

  scannerRefAt(agentId: BigInt, pos: BigInt): Dispatcher__scannerRefAtResult {
    let result = super.call(
      "scannerRefAt",
      "scannerRefAt(uint256,uint256):(bool,uint256,address,uint256,string,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(agentId),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );

    return new Dispatcher__scannerRefAtResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toBoolean()
    );
  }

  try_scannerRefAt(
    agentId: BigInt,
    pos: BigInt
  ): ethereum.CallResult<Dispatcher__scannerRefAtResult> {
    let result = super.tryCall(
      "scannerRefAt",
      "scannerRefAt(uint256,uint256):(bool,uint256,address,uint256,string,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(agentId),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Dispatcher__scannerRefAtResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toBoolean()
      )
    );
  }

  scannerRegistry(): Address {
    let result = super.call(
      "scannerRegistry",
      "scannerRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_scannerRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "scannerRegistry",
      "scannerRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get forwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get __agents(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get __scanners(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LinkCall extends ethereum.Call {
  get inputs(): LinkCall__Inputs {
    return new LinkCall__Inputs(this);
  }

  get outputs(): LinkCall__Outputs {
    return new LinkCall__Outputs(this);
  }
}

export class LinkCall__Inputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }

  get agentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get scannerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LinkCall__Outputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class SetAccessManagerCall extends ethereum.Call {
  get inputs(): SetAccessManagerCall__Inputs {
    return new SetAccessManagerCall__Inputs(this);
  }

  get outputs(): SetAccessManagerCall__Outputs {
    return new SetAccessManagerCall__Outputs(this);
  }
}

export class SetAccessManagerCall__Inputs {
  _call: SetAccessManagerCall;

  constructor(call: SetAccessManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAccessManagerCall__Outputs {
  _call: SetAccessManagerCall;

  constructor(call: SetAccessManagerCall) {
    this._call = call;
  }
}

export class SetAgentRegistryCall extends ethereum.Call {
  get inputs(): SetAgentRegistryCall__Inputs {
    return new SetAgentRegistryCall__Inputs(this);
  }

  get outputs(): SetAgentRegistryCall__Outputs {
    return new SetAgentRegistryCall__Outputs(this);
  }
}

export class SetAgentRegistryCall__Inputs {
  _call: SetAgentRegistryCall;

  constructor(call: SetAgentRegistryCall) {
    this._call = call;
  }

  get newAgentRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAgentRegistryCall__Outputs {
  _call: SetAgentRegistryCall;

  constructor(call: SetAgentRegistryCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get ensRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ensName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetRouterCall extends ethereum.Call {
  get inputs(): SetRouterCall__Inputs {
    return new SetRouterCall__Inputs(this);
  }

  get outputs(): SetRouterCall__Outputs {
    return new SetRouterCall__Outputs(this);
  }
}

export class SetRouterCall__Inputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }

  get newRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRouterCall__Outputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }
}

export class SetScannerRegistryCall extends ethereum.Call {
  get inputs(): SetScannerRegistryCall__Inputs {
    return new SetScannerRegistryCall__Inputs(this);
  }

  get outputs(): SetScannerRegistryCall__Outputs {
    return new SetScannerRegistryCall__Outputs(this);
  }
}

export class SetScannerRegistryCall__Inputs {
  _call: SetScannerRegistryCall;

  constructor(call: SetScannerRegistryCall) {
    this._call = call;
  }

  get newScannerRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetScannerRegistryCall__Outputs {
  _call: SetScannerRegistryCall;

  constructor(call: SetScannerRegistryCall) {
    this._call = call;
  }
}

export class UnlinkCall extends ethereum.Call {
  get inputs(): UnlinkCall__Inputs {
    return new UnlinkCall__Inputs(this);
  }

  get outputs(): UnlinkCall__Outputs {
    return new UnlinkCall__Outputs(this);
  }
}

export class UnlinkCall__Inputs {
  _call: UnlinkCall;

  constructor(call: UnlinkCall) {
    this._call = call;
  }

  get agentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get scannerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnlinkCall__Outputs {
  _call: UnlinkCall;

  constructor(call: UnlinkCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
