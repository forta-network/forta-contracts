// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccessManagerUpdated extends ethereum.Event {
  get params(): AccessManagerUpdated__Params {
    return new AccessManagerUpdated__Params(this);
  }
}

export class AccessManagerUpdated__Params {
  _event: AccessManagerUpdated;

  constructor(event: AccessManagerUpdated) {
    this._event = event;
  }

  get newAddressManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DelaySet extends ethereum.Event {
  get params(): DelaySet__Params {
    return new DelaySet__Params(this);
  }
}

export class DelaySet__Params {
  _event: DelaySet;

  constructor(event: DelaySet) {
    this._event = event;
  }

  get newWithdrawalDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Froze extends ethereum.Event {
  get params(): Froze__Params {
    return new Froze__Params(this);
  }
}

export class Froze__Params {
  _event: Froze;

  constructor(event: Froze) {
    this._event = event;
  }

  get subjectType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get subject(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get by(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get isFrozen(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class MaxStakeReached extends ethereum.Event {
  get params(): MaxStakeReached__Params {
    return new MaxStakeReached__Params(this);
  }
}

export class MaxStakeReached__Params {
  _event: MaxStakeReached;

  constructor(event: MaxStakeReached) {
    this._event = event;
  }

  get subjectType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get subject(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Released extends ethereum.Event {
  get params(): Released__Params {
    return new Released__Params(this);
  }
}

export class Released__Params {
  _event: Released;

  constructor(event: Released) {
    this._event = event;
  }

  get subjectType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get subject(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Rewarded extends ethereum.Event {
  get params(): Rewarded__Params {
    return new Rewarded__Params(this);
  }
}

export class Rewarded__Params {
  _event: Rewarded;

  constructor(event: Rewarded) {
    this._event = event;
  }

  get subjectType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get subject(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RouterUpdated extends ethereum.Event {
  get params(): RouterUpdated__Params {
    return new RouterUpdated__Params(this);
  }
}

export class RouterUpdated__Params {
  _event: RouterUpdated;

  constructor(event: RouterUpdated) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Slashed extends ethereum.Event {
  get params(): Slashed__Params {
    return new Slashed__Params(this);
  }
}

export class Slashed__Params {
  _event: Slashed;

  constructor(event: Slashed) {
    this._event = event;
  }

  get subjectType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get subject(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get by(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakeDeposited extends ethereum.Event {
  get params(): StakeDeposited__Params {
    return new StakeDeposited__Params(this);
  }
}

export class StakeDeposited__Params {
  _event: StakeDeposited;

  constructor(event: StakeDeposited) {
    this._event = event;
  }

  get subjectType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get subject(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakeParamsManagerSet extends ethereum.Event {
  get params(): StakeParamsManagerSet__Params {
    return new StakeParamsManagerSet__Params(this);
  }
}

export class StakeParamsManagerSet__Params {
  _event: StakeParamsManagerSet;

  constructor(event: StakeParamsManagerSet) {
    this._event = event;
  }

  get newManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokensSwept extends ethereum.Event {
  get params(): TokensSwept__Params {
    return new TokensSwept__Params(this);
  }
}

export class TokensSwept__Params {
  _event: TokensSwept;

  constructor(event: TokensSwept) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TreasurySet extends ethereum.Event {
  get params(): TreasurySet__Params {
    return new TreasurySet__Params(this);
  }
}

export class TreasurySet__Params {
  _event: TreasurySet;

  constructor(event: TreasurySet) {
    this._event = event;
  }

  get newTreasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawalExecuted extends ethereum.Event {
  get params(): WithdrawalExecuted__Params {
    return new WithdrawalExecuted__Params(this);
  }
}

export class WithdrawalExecuted__Params {
  _event: WithdrawalExecuted;

  constructor(event: WithdrawalExecuted) {
    this._event = event;
  }

  get subjectType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get subject(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class WithdrawalInitiated extends ethereum.Event {
  get params(): WithdrawalInitiated__Params {
    return new WithdrawalInitiated__Params(this);
  }
}

export class WithdrawalInitiated__Params {
  _event: WithdrawalInitiated;

  constructor(event: WithdrawalInitiated) {
    this._event = event;
  }

  get subjectType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get subject(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FortaStaking extends ethereum.SmartContract {
  static bind(address: Address): FortaStaking {
    return new FortaStaking("FortaStaking", address);
  }

  activeStakeFor(subjectType: i32, subject: BigInt): BigInt {
    let result = super.call(
      "activeStakeFor",
      "activeStakeFor(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );

    return result[0].toBigInt();
  }

  try_activeStakeFor(
    subjectType: i32,
    subject: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeStakeFor",
      "activeStakeFor(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableReward(subjectType: i32, subject: BigInt, account: Address): BigInt {
    let result = super.call(
      "availableReward",
      "availableReward(uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_availableReward(
    subjectType: i32,
    subject: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableReward",
      "availableReward(uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  deposit(subjectType: i32, subject: BigInt, stakeValue: BigInt): BigInt {
    let result = super.call(
      "deposit",
      "deposit(uint8,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromUnsignedBigInt(stakeValue)
      ]
    );

    return result[0].toBigInt();
  }

  try_deposit(
    subjectType: i32,
    subject: BigInt,
    stakeValue: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint8,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromUnsignedBigInt(stakeValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  inactiveSharesOf(
    subjectType: i32,
    subject: BigInt,
    account: Address
  ): BigInt {
    let result = super.call(
      "inactiveSharesOf",
      "inactiveSharesOf(uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_inactiveSharesOf(
    subjectType: i32,
    subject: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inactiveSharesOf",
      "inactiveSharesOf(uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inactiveStakeFor(subjectType: i32, subject: BigInt): BigInt {
    let result = super.call(
      "inactiveStakeFor",
      "inactiveStakeFor(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );

    return result[0].toBigInt();
  }

  try_inactiveStakeFor(
    subjectType: i32,
    subject: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inactiveStakeFor",
      "inactiveStakeFor(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initiateWithdrawal(
    subjectType: i32,
    subject: BigInt,
    sharesValue: BigInt
  ): BigInt {
    let result = super.call(
      "initiateWithdrawal",
      "initiateWithdrawal(uint8,uint256,uint256):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromUnsignedBigInt(sharesValue)
      ]
    );

    return result[0].toBigInt();
  }

  try_initiateWithdrawal(
    subjectType: i32,
    subject: BigInt,
    sharesValue: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initiateWithdrawal",
      "initiateWithdrawal(uint8,uint256,uint256):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromUnsignedBigInt(sharesValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFrozen(subjectType: i32, subject: BigInt): boolean {
    let result = super.call("isFrozen", "isFrozen(uint8,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
      ethereum.Value.fromUnsignedBigInt(subject)
    ]);

    return result[0].toBoolean();
  }

  try_isFrozen(
    subjectType: i32,
    subject: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFrozen", "isFrozen(uint8,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
      ethereum.Value.fromUnsignedBigInt(subject)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  releaseReward(subjectType: i32, subject: BigInt, account: Address): BigInt {
    let result = super.call(
      "releaseReward",
      "releaseReward(uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_releaseReward(
    subjectType: i32,
    subject: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "releaseReward",
      "releaseReward(uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sharesOf(subjectType: i32, subject: BigInt, account: Address): BigInt {
    let result = super.call(
      "sharesOf",
      "sharesOf(uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_sharesOf(
    subjectType: i32,
    subject: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sharesOf",
      "sharesOf(uint8,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slash(subjectType: i32, subject: BigInt, stakeValue: BigInt): BigInt {
    let result = super.call("slash", "slash(uint8,uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
      ethereum.Value.fromUnsignedBigInt(subject),
      ethereum.Value.fromUnsignedBigInt(stakeValue)
    ]);

    return result[0].toBigInt();
  }

  try_slash(
    subjectType: i32,
    subject: BigInt,
    stakeValue: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slash",
      "slash(uint8,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject),
        ethereum.Value.fromUnsignedBigInt(stakeValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedToken(): Address {
    let result = super.call("stakedToken", "stakedToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakedToken", "stakedToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sweep(token: Address, recipient: Address): BigInt {
    let result = super.call("sweep", "sweep(address,address):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(recipient)
    ]);

    return result[0].toBigInt();
  }

  try_sweep(token: Address, recipient: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sweep", "sweep(address,address):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(recipient)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalActiveStake(): BigInt {
    let result = super.call(
      "totalActiveStake",
      "totalActiveStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalActiveStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalActiveStake",
      "totalActiveStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInactiveShares(subjectType: i32, subject: BigInt): BigInt {
    let result = super.call(
      "totalInactiveShares",
      "totalInactiveShares(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalInactiveShares(
    subjectType: i32,
    subject: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInactiveShares",
      "totalInactiveShares(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInactiveStake(): BigInt {
    let result = super.call(
      "totalInactiveStake",
      "totalInactiveStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInactiveStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInactiveStake",
      "totalInactiveStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(subjectType: i32, subject: BigInt): BigInt {
    let result = super.call(
      "totalShares",
      "totalShares(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalShares(
    subjectType: i32,
    subject: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalShares",
      "totalShares(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdraw(subjectType: i32, subject: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint8,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
      ethereum.Value.fromUnsignedBigInt(subject)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(subjectType: i32, subject: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(subjectType)),
        ethereum.Value.fromUnsignedBigInt(subject)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get forwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get subjectType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get subject(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get stakeValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FreezeCall extends ethereum.Call {
  get inputs(): FreezeCall__Inputs {
    return new FreezeCall__Inputs(this);
  }

  get outputs(): FreezeCall__Outputs {
    return new FreezeCall__Outputs(this);
  }
}

export class FreezeCall__Inputs {
  _call: FreezeCall;

  constructor(call: FreezeCall) {
    this._call = call;
  }

  get subjectType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get subject(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get frozen(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class FreezeCall__Outputs {
  _call: FreezeCall;

  constructor(call: FreezeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get __stakedToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get __withdrawalDelay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get __treasury(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitiateWithdrawalCall extends ethereum.Call {
  get inputs(): InitiateWithdrawalCall__Inputs {
    return new InitiateWithdrawalCall__Inputs(this);
  }

  get outputs(): InitiateWithdrawalCall__Outputs {
    return new InitiateWithdrawalCall__Outputs(this);
  }
}

export class InitiateWithdrawalCall__Inputs {
  _call: InitiateWithdrawalCall;

  constructor(call: InitiateWithdrawalCall) {
    this._call = call;
  }

  get subjectType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get subject(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sharesValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitiateWithdrawalCall__Outputs {
  _call: InitiateWithdrawalCall;

  constructor(call: InitiateWithdrawalCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RelayPermitCall extends ethereum.Call {
  get inputs(): RelayPermitCall__Inputs {
    return new RelayPermitCall__Inputs(this);
  }

  get outputs(): RelayPermitCall__Outputs {
    return new RelayPermitCall__Outputs(this);
  }
}

export class RelayPermitCall__Inputs {
  _call: RelayPermitCall;

  constructor(call: RelayPermitCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class RelayPermitCall__Outputs {
  _call: RelayPermitCall;

  constructor(call: RelayPermitCall) {
    this._call = call;
  }
}

export class ReleaseRewardCall extends ethereum.Call {
  get inputs(): ReleaseRewardCall__Inputs {
    return new ReleaseRewardCall__Inputs(this);
  }

  get outputs(): ReleaseRewardCall__Outputs {
    return new ReleaseRewardCall__Outputs(this);
  }
}

export class ReleaseRewardCall__Inputs {
  _call: ReleaseRewardCall;

  constructor(call: ReleaseRewardCall) {
    this._call = call;
  }

  get subjectType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get subject(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ReleaseRewardCall__Outputs {
  _call: ReleaseRewardCall;

  constructor(call: ReleaseRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RewardCall extends ethereum.Call {
  get inputs(): RewardCall__Inputs {
    return new RewardCall__Inputs(this);
  }

  get outputs(): RewardCall__Outputs {
    return new RewardCall__Outputs(this);
  }
}

export class RewardCall__Inputs {
  _call: RewardCall;

  constructor(call: RewardCall) {
    this._call = call;
  }

  get subjectType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get subject(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RewardCall__Outputs {
  _call: RewardCall;

  constructor(call: RewardCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetAccessManagerCall extends ethereum.Call {
  get inputs(): SetAccessManagerCall__Inputs {
    return new SetAccessManagerCall__Inputs(this);
  }

  get outputs(): SetAccessManagerCall__Outputs {
    return new SetAccessManagerCall__Outputs(this);
  }
}

export class SetAccessManagerCall__Inputs {
  _call: SetAccessManagerCall;

  constructor(call: SetAccessManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAccessManagerCall__Outputs {
  _call: SetAccessManagerCall;

  constructor(call: SetAccessManagerCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetDelayCall extends ethereum.Call {
  get inputs(): SetDelayCall__Inputs {
    return new SetDelayCall__Inputs(this);
  }

  get outputs(): SetDelayCall__Outputs {
    return new SetDelayCall__Outputs(this);
  }
}

export class SetDelayCall__Inputs {
  _call: SetDelayCall;

  constructor(call: SetDelayCall) {
    this._call = call;
  }

  get newDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelayCall__Outputs {
  _call: SetDelayCall;

  constructor(call: SetDelayCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get ensRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ensName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetRouterCall extends ethereum.Call {
  get inputs(): SetRouterCall__Inputs {
    return new SetRouterCall__Inputs(this);
  }

  get outputs(): SetRouterCall__Outputs {
    return new SetRouterCall__Outputs(this);
  }
}

export class SetRouterCall__Inputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }

  get newRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRouterCall__Outputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }
}

export class SetStakingParametersManagerCall extends ethereum.Call {
  get inputs(): SetStakingParametersManagerCall__Inputs {
    return new SetStakingParametersManagerCall__Inputs(this);
  }

  get outputs(): SetStakingParametersManagerCall__Outputs {
    return new SetStakingParametersManagerCall__Outputs(this);
  }
}

export class SetStakingParametersManagerCall__Inputs {
  _call: SetStakingParametersManagerCall;

  constructor(call: SetStakingParametersManagerCall) {
    this._call = call;
  }

  get newStakingParameters(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakingParametersManagerCall__Outputs {
  _call: SetStakingParametersManagerCall;

  constructor(call: SetStakingParametersManagerCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get newTreasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get newUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get subjectType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get subject(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get stakeValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SweepCall extends ethereum.Call {
  get inputs(): SweepCall__Inputs {
    return new SweepCall__Inputs(this);
  }

  get outputs(): SweepCall__Outputs {
    return new SweepCall__Outputs(this);
  }
}

export class SweepCall__Inputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SweepCall__Outputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get subjectType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get subject(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
