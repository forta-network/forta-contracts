// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";

import "../BaseComponentUpgradeable.sol";

abstract contract ScannerRegistryCore is
    BaseComponentUpgradeable,
    ERC721Upgradeable
{
    event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata);

    /**
     * @notice Checks sender (or metatx signer) is owner of the scanner token.
     * @param scannerId ERC1155 token id of the scanner.
     */
    modifier onlyOwnerOf(uint256 scannerId) {
        require(_msgSender() == ownerOf(scannerId), "ScannerRegistryCore: Restricted to scanner owner");
        _;
    }

    /**
     * @notice Scanner registration via admin key.
     * @dev restricted to SCANNER_ADMIN_ROLE. Scanner address will be converted to uin256 ERC1155 token id.
     * @param scanner address generated by scanner software.
     * @param owner of the scanner. Will have admin privileges over the registering scanner.
     * @param chainId that the scanner will monitor.
     * @param metadata IPFS pointer to scanner's metadata JSON
     */
    function adminRegister(address scanner, address owner, uint256 chainId, string calldata metadata) public onlyRole(SCANNER_ADMIN_ROLE) {
        _register(scanner, owner, chainId, metadata);
    }

    /**
     * @notice Checks if scannerId has been registered (minted).
     * @param scannerId ERC1155 token id of the scanner.
     * @return true if scannerId exists, false otherwise.
     */
    function isRegistered(uint256 scannerId) public view returns(bool) {
        return _exists(scannerId);
    }

    /**
     * @notice Public method for scanners to self register in Forta and mint registration ERC1155 token.
     * @dev _msgSender() will be considered the Scanner Node address.
     * @param owner of the scanner. Will have admin privileges over the registering scanner.
     * @param chainId that the scanner will monitor.
     * @param metadata IPFS pointer to scanner's metadata JSON
     */
    function register(address owner, uint256 chainId, string calldata metadata) virtual public {
        _register(_msgSender(), owner, chainId, metadata);
    }

    /**
     * @notice Internal method for scanners to self register in Forta and mint registration ERC1155 token.
     * Public staking must be activated in the target chainId.
     * @dev Scanner address will be converted to uin256 ERC1155 token id. Will trigger _before and _after hooks within
     * the inheritance tree.
     * @param owner of the scanner. Will have admin privileges over the registering scanner.
     * @param chainId that the scanner will monitor.
     * @param metadata IPFS pointer to scanner's metadata JSON
     */
    function _register(address scanner, address owner, uint256 chainId, string calldata metadata) public {
        uint256 scannerId = scannerAddressToId(scanner);
        _mint(owner, scannerId);

        _beforeScannerUpdate(scannerId, chainId, metadata);
        _scannerUpdate(scannerId, chainId, metadata);
        _afterScannerUpdate(scannerId, chainId, metadata);
    }

    /**
     * @notice Allows the admin to update chainId and metadata.
     * @dev Restricted to SCANNER_ADMIN_ROLE. Will trigger _before and _after hooks within the inheritance tree.
     * @param scanner address of the Scanner Node.
     * @param chainId that the scanner will monitor.
     * @param metadata IPFS pointer to scanner's metadata JSON
     */
    function adminUpdate(address scanner, uint256 chainId, string calldata metadata) public onlyRole(SCANNER_ADMIN_ROLE) {
        uint256 scannerId = scannerAddressToId(scanner);
        require(isRegistered(scannerId), "ScannerRegistryCore: scanner must be registered");
        _beforeScannerUpdate(scannerId, chainId, metadata);
        _scannerUpdate(scannerId, chainId, metadata);
        _afterScannerUpdate(scannerId, chainId, metadata);
    }

    /// Converts scanner address to uint256 for ERC1155 Token Id.
    function scannerAddressToId(address scanner) public pure returns(uint256) {
        return uint256(uint160(scanner));
    }

    /**
     * @notice _before hook triggered before scanner creation or update.
     * @dev Does nothing in this base contract.
     * @param scannerId ERC1155 token id of the scanner.
     * @param chainId that the scanner will monitor.
     * @param metadata IPFS pointer to scanner's metadata JSON
     */
    function _beforeScannerUpdate(uint256 scannerId, uint256 chainId, string calldata metadata) internal virtual {
    }

    /**
     * @notice Scanner update logic.
     * @dev Emits ScannerUpdated(scannerId, chainId, metadata)
     * @param scannerId ERC1155 token id of the scanner.
     * @param chainId that the scanner will monitor.
     * @param metadata IPFS pointer to scanner's metadata JSON
     */
    function _scannerUpdate(uint256 scannerId, uint256 chainId, string calldata metadata) internal virtual {
        emit ScannerUpdated(scannerId, chainId, metadata);
    }

    /**
     * @notice _after hook triggered after scanner creation or update.
     * @dev emits Router hook
     * @param scannerId ERC1155 token id of the scanner.
     * @param chainId that the scanner will monitor.
     * @param metadata IPFS pointer to scanner's metadata JSON
     */
    function _afterScannerUpdate(uint256 scannerId, uint256 chainId, string calldata metadata) internal virtual {
        _emitHook(abi.encodeWithSignature("hook_afterScannerUpdate(uint256)", scannerId));
    }

    /**
     * @notice Helper to get either msg msg.sender if not a meta transaction, signer of forwarder metatx if it is.
     * @inheritdoc ForwardedContext
     */
    function _msgSender() internal view virtual override(ContextUpgradeable, BaseComponentUpgradeable) returns (address sender) {
        return super._msgSender();
    }

    /**
     * @notice Helper to get msg.data if not a meta transaction, forwarder data in metatx if it is.
     * @inheritdoc ForwardedContext
     */
    function _msgData() internal view virtual override(ContextUpgradeable, BaseComponentUpgradeable) returns (bytes calldata) {
        return super._msgData();
    }

    uint256[50] private __gap;
}